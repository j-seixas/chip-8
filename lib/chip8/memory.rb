# frozen_string_literal: true

module Chip8
  # Memory logic of Chip-8
  class Memory
    MEMORY_SIZE = 4096
    ROM_OFFSET = 0x200
    SPRITES_OFFSET = 0x0

    SPRITES = [
      0xF0, 0x90, 0x90, 0x90, 0xF0, # 0
      0x20, 0x60, 0x20, 0x20, 0x70, # 1
      0xF0, 0x10, 0xF0, 0x80, 0xF0, # 2
      0xF0, 0x10, 0xF0, 0x10, 0xF0, # 3
      0x90, 0x90, 0xF0, 0x10, 0x10, # 4
      0xF0, 0x80, 0xF0, 0x10, 0xF0, # 5
      0xF0, 0x80, 0xF0, 0x90, 0xF0, # 6
      0xF0, 0x10, 0x20, 0x40, 0x40, # 7
      0xF0, 0x90, 0xF0, 0x90, 0xF0, # 8
      0xF0, 0x90, 0xF0, 0x10, 0xF0, # 9
      0xF0, 0x90, 0xF0, 0x90, 0x90, # A
      0xE0, 0x90, 0xE0, 0x90, 0xE0, # B
      0xF0, 0x80, 0x80, 0x80, 0xF0, # C
      0xE0, 0x90, 0x90, 0x90, 0xE0, # D
      0xF0, 0x80, 0xF0, 0x80, 0xF0, # E
      0xF0, 0x80, 0xF0, 0x80, 0x80  # F
    ].freeze

    def initialize
      @mem = Array.new MEMORY_SIZE, 0
      load_sprites
    end

    def load_sprites
      SPRITES.each_with_index do |byte, i|
        @mem[SPRITES_OFFSET + i] = byte
      end
    end

    def load_rom(rom_bytes)
      rom_bytes.each_with_index do |byte, i|
        @mem[ROM_OFFSET + i] = byte
      end
    end

    def instruction(index)
      ((read(index) << 8) + read(index + 1)) & 0xFFFF
    end

    def write(index, value)
      @mem[index] = value & 0xFF
    end

    def read(index)
      @mem[index]
    end
  end
end
